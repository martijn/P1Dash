@page "/"
@inject DsmrService _dsmrService
@using P1Dash.Dsmr
@using P1Dash.Services
@implements IDisposable

<h1 class="text-center">P1 Dash</h1>
    
<RadzenRadialGauge Style="width: 100%; height: 300px;">
    <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="1" Min="-4" Max="8" TickPosition="GaugeTickPosition.Outside">
        @if (_guage != null)
        {
            <RadzenRadialGaugeScalePointer Value=@_guage.Value Length="0.6" ShowValue="true">
                <Template Context="pointer">
                    <h4 class=@(_guage < 0 ? "text-success" : "")>
                        @_guage kW
                    </h4>
                </Template>
            </RadzenRadialGaugeScalePointer>
        }
        <RadzenRadialGaugeScaleRange From="-4" To="0" Fill="green"/>
    </RadzenRadialGaugeScale>
</RadzenRadialGauge>

@code
{
    private double? _guage;

    private async Task Update(P1Telegram? t)
    {
        if (t != null) _guage = t.ElectricityDelivered - t.ElectricityReceived;
        
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        if (_dsmrService.History.Count > 0)
            await Update(_dsmrService.History.Last());
        
         _dsmrService.Callbacks.Add(Update);   
    }

    public void Dispose() => _dsmrService.Callbacks.Remove(Update);
}
