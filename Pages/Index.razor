@page "/"
@inject DsmrService _dsmrService
@inject IDsmrProvider _dsmrProvider
@using P1Dash.Services
@using P1Dash.Dsmr
@implements IDisposable

<RadzenRadialGauge Style="width: 100%; height: 300px;">
    <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="1" Min="-4" Max="8" TickPosition="GaugeTickPosition.Outside">
        @if (_gauge != null)
        {
            <RadzenRadialGaugeScalePointer Value=@_gauge.Value Length="0.6" ShowValue="true">
                <Template Context="pointer">
                    <h4 class=@(_gauge < 0 ? "text-success" : "")>
                        @_gauge kW
                    </h4>
                </Template>
            </RadzenRadialGaugeScalePointer>
        }
        <RadzenRadialGaugeScaleRange From="-4" To="0" Fill="green"/>
    </RadzenRadialGaugeScale>
</RadzenRadialGauge>

@if (_oldest != null)
{
    <p>
        Average since @(_oldest.Value.ToString("HH:mm")):<br/>@_average.ToString("N3") kW
    </p>
}

@if (!_dsmrProvider.Connected)
{
    <h4>Connection error</h4>
    <p>
        @_dsmrProvider.Error
    </p>
    <p>
        <a href="/Settings" class="btn btn-sm">Open Settings</a>
    </p>
}

@code
{
    private double? _gauge;
    private double _average;
    private DateTime? _oldest;

    private async Task Update(P1Telegram? t)
    {
        if (t != null) _gauge = t.ElectricityDelivered - t.ElectricityReceived;

        _average = _dsmrService.History.ToList().Average(t => t.ElectricityDelivered - t.ElectricityReceived);
        _oldest = _dsmrService.History.First().Timestamp;

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        if (_dsmrService.History.Count > 0)
            await Update(_dsmrService.History.Last());

        _dsmrService.Callbacks.Add(Update);
    }

    public void Dispose()
    {
        _dsmrService.Callbacks.Remove(Update);
    }
}